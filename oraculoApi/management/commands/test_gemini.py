# Crear archivo: oraculoApi/management/commands/test_gemini.py

import os
from django.core.management.base import BaseCommand
import google.generativeai as genai
from django.conf import settings

class Command(BaseCommand):
    help = 'Prueba la conexi√≥n con Gemini y lista modelos disponibles'

    def handle(self, *args, **options):
        try:
            # Configurar API
            genai.configure(api_key=settings.GEMINI_API_KEY)
            
            self.stdout.write("üîç Listando modelos disponibles...")
            
            # Listar modelos disponibles
            models = genai.list_models()
            
            self.stdout.write("\nüìã Modelos Gemini disponibles:")
            for model in models:
                if 'generateContent' in model.supported_generation_methods:
                    self.stdout.write(f"  ‚úÖ {model.name}")
                else:
                    self.stdout.write(f"  ‚ùå {model.name} (no soporta generateContent)")
            
            # Probar modelo recomendado
            self.stdout.write("\nüß™ Probando gemini-1.5-flash...")
            
            try:
                model = genai.GenerativeModel('gemini-1.5-flash')
                response = model.generate_content("Di 'Conexi√≥n exitosa con Gemini' en una frase m√≠stica")
                
                if response.candidates and len(response.candidates) > 0:
                    self.stdout.write(self.style.SUCCESS(f"‚úÖ Respuesta: {response.candidates[0].content.parts[0].text}"))
                else:
                    self.stdout.write(self.style.ERROR("‚ùå No se recibi√≥ respuesta v√°lida"))
                    
            except Exception as e:
                self.stdout.write(self.style.ERROR(f"‚ùå Error con gemini-1.5-flash: {str(e)}"))
                
                # Probar modelo alternativo
                self.stdout.write("\nüîÑ Probando gemini-1.5-pro...")
                try:
                    model = genai.GenerativeModel('gemini-1.5-pro')
                    response = model.generate_content("Di 'Conexi√≥n exitosa' brevemente")
                    
                    if response.candidates and len(response.candidates) > 0:
                        self.stdout.write(self.style.SUCCESS(f"‚úÖ Respuesta con gemini-1.5-pro: {response.candidates[0].content.parts[0].text}"))
                    else:
                        self.stdout.write(self.style.ERROR("‚ùå No se recibi√≥ respuesta v√°lida con gemini-1.5-pro"))
                        
                except Exception as e2:
                    self.stdout.write(self.style.ERROR(f"‚ùå Error con gemini-1.5-pro: {str(e2)}"))
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f"‚ùå Error general: {str(e)}"))
            self.stdout.write("üí° Verifica que GEMINI_API_KEY est√© configurado correctamente")